#include "services_microboone.fcl"
#include "dlprod_fclbase_analyzers.fcl"

process_name: DLprod

services:
{
  TFileService: { fileName: "larcv_hist.root" }
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  TimeTracker:  {}
  MemoryTracker:     {} # default is one
  message:      @local::microboone_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
  LLMetaMaker:       {Enable: false}
  LArCVMetaMaker:    {Enable: false}
  @table::microboone_services_reco
}
services.DetectorClocksService.InheritClockConfig:           false
services.DetectorClocksService.TriggerOffsetTPC:             -0.400e3
services.SpaceCharge.EnableSimSpatialSCE: true

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
}

#output the artroot file
outputs:
{
    out:
        {
        module_type: RootOutput
        fileName:    "%ifb_postdlmctruth.root"
        dataTier:    "reconstructed"
        compressionLevel: 1
        }
}

# Add larcv analyzer modules.
physics:{

    analyzers:{
        @table::dlprod_analyzers
         }

    stream1: [out]

    }
physics.analyzers.superaMCTruthOnly.out_filename: "larcv_mctruth.root"

# Define larlite+larcv analyzer sequence.

physics.larcv: [ opreco, reco2d, crt, mcinfo, simch, superaMCTruthOnly ]

# Add larcv sequence to end_paths.

physics.end_paths: [ larcv, stream1 ]

# Configuration for TFileMetadataMicroBooNE service.

microboone_tfile_metadata:
{
  JSONFileName:	[ "larlite_opreco.root.json",
                  "larlite_reco2d.root.json",
                  "larlite_crt.root.json",
                  "larlite_mcinfo.root.json",
                  "larlite_simch.root.json",
                  "larcv_mctruth.root.json" ]
  GenerateTFileMetadata: [ true, true, true, true, true, true ]
  dataTier:              [ "larlite_opreco", "larlite_reco2d", "larlite_crt", "larlite_mcinfo", "larlite_simch", "larcv_mctruth" ]
  fileFormat:            [ "root", "root", "root", "root", "root", "root" ]
}

# physics.analyzers.mcinfo.DataLookUpMap.hit: ["gaushit"]
# physics.analyzers.mcinfo.DataLookUpMap.opflash: [
#   "simpleFlashBeam",		
#   "simpleFlashCosmic",		
#   "opflashBeam",
#   "opflashCosmic" ]
# physics.analyzers.mcinfo.DataLookUpMap.ophit: [
#   "ophitBeam",
#   "ophitCosmic"
# ]
# physics.analyzers.mcinfo.DataLookupMap.swtrigger: [
#     "swtrigger"
#             ]
#             trigger: [
#                "triggersim"
#             ]
#          }
